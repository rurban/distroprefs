--- Class-XSAccessor-1.19/XSAccessor.xs~
+++ Class-XSAccessor-1.19/XSAccessor.xs
@@ -175,14 +175,20 @@ if (!(SvROK(self) && SvTYPE(SvRV(self)) == SVt_PVAV)) {
 
 #ifdef CXA_ENABLE_ENTERSUB_OPTIMIZATION
 
-#define CXA_OPTIMIZATION_OK(op) ((op->op_spare & 1) != 1)
-#define CXA_DISABLE_OPTIMIZATION(op) (op->op_spare |= 1)
+#if defined(USE_CPERL) && PERL_VERSION > 23
+#define OpSPARE(o) o->op_typechecked
+#else
+#define OpSPARE(o) o->op_spare
+#endif
+
+#define CXA_OPTIMIZATION_OK(op) ((OpSPARE(op) & 1) != 1)
+#define CXA_DISABLE_OPTIMIZATION(op) (OpSPARE(op) |= 1)
 
 /* see t/08hash_entersub.t */
 #define CXAH_OPTIMIZE_ENTERSUB_TEST(name)                                     \
 STMT_START {                                                                  \
     /* print op_spare so that we get failing tests if perl starts using it */ \
-    warn("cxah: accessor: op_spare: %u", PL_op->op_spare);                    \
+    warn("cxah: accessor: op_spare: %u", OpSPARE(PL_op));                     \
                                                                               \
     if (PL_op->op_ppaddr == CXA_DEFAULT_ENTERSUB) {                           \
         if (CXA_OPTIMIZATION_OK(PL_op)) {                                     \
@@ -483,7 +489,11 @@ PROTOTYPES: DISABLE
 
 BOOT:
 #ifdef CXA_ENABLE_ENTERSUB_OPTIMIZATION
+# ifdef USE_CPERL
+CXA_DEFAULT_ENTERSUB = PL_ppaddr[OP_ENTERXSSUB];
+# else
 CXA_DEFAULT_ENTERSUB = PL_ppaddr[OP_ENTERSUB];
+# endif
 #endif
 #ifdef USE_ITHREADS
 _init_cxsa_lock(&CXSAccessor_lock); /* cf. CXSAccessor.h */

--- Class-XSAccessorr-1.19/t/50reentrant_goto_sigsegv.t~	2010-10-31 12:32:26.000000000 +0100
+++ Class-XSAccessorr-1.19/t/50reentrant_goto_sigsegv.t	2017-02-21 18:06:18.000000000 +0100
@@ -6,7 +6,7 @@
 use warnings;
 
 use Class::XSAccessor;
-use Test::More tests => 14;
+use Test::More tests => 28;
 
 my $shim_calls;
 
@@ -33,7 +33,7 @@
 }
 
 TODO: {
-    todo_skip 'bug in perls < 5.8.9', 14, $] < 5.008009;
+    todo_skip 'bug in perls < 5.8.9', 14 if $] < 5.008009;
 
     for my $name (qw/bar baz/) {
       for my $pass (1..2) {
@@ -48,11 +48,13 @@
         is ($shim_calls, 1, "Shim called ($name pass $pass)" );
 
         eval { $obj->$name ('ack!') };
-        ok ($@ =~ /Usage\: $name\(self\)/, "Exception from R/O accessor thrown ($name pass $pass)" );
+        like ($@, qr/Usage\: (Foo::)?$name\(self\)/,
+              "Exception from R/O accessor thrown ($name pass $pass)" );
         is ($shim_calls, 2, "Shim called anyway ($name pass $pass)" );
 
         eval { $obj->$name ('ick!') };
-        ok ($@ =~ /Usage\: $name\(self\)/, "Exception from R/O accessor thrown once again ($name pass $pass)" );
+        like ($@, qr/Usage\: (Foo::)?$name\(self\)/,
+              "Exception from R/O accessor thrown once again ($name pass $pass)" );
         is ($shim_calls, 3, "Shim called again ($name pass $pass)" );
       }
     }
